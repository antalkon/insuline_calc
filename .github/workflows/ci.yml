name: CI Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: yourpassword
          POSTGRES_DB: mydatabase
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7
        ports:
          - 6379:6379

      minio:
        image: minio/minio
        env:
          MINIO_ROOT_USER: minioadmin
          MINIO_ROOT_PASSWORD: minioadmin
        ports:
          - 9000:9000
          - 9001:9001
        options: >-
          --health-cmd "curl -f http://localhost:9000/minio/health/live"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: 1.23

      - name: Install dependencies
        run: |
          go mod download
          go mod tidy

      - name: Generate Swagger docs
        run: |
          go install github.com/swaggo/swag/cmd/swag@latest
          swag init -g cmd/backend/main.go -d .

      - name: Run linters
        run: |
          go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest
          golangci-lint run ./...

      - name: Run tests
        run: |
          go test ./... -coverprofile=coverage.out -covermode=atomic
          go tool cover -func=coverage.out | tee coverage.txt

      - name: Collect test coverage statistics
        run: |
          COVERAGE=$(go tool cover -func=coverage.out | grep total | awk '{print substr($3, 1, length($3)-1)}')
          echo "Total test coverage: $COVERAGE%" >> $GITHUB_STEP_SUMMARY
          echo "Coverage report:"
          cat coverage.txt

      - name: Build Docker image
        run: docker build -t myapp:latest .

      - name: Start services with docker-compose
        run: docker-compose up -d

      - name: Wait for services to be ready
        run: |
          echo "Waiting for services to be ready..."
          sleep 10
          docker ps

      - name: Manually start MinIO server
        run: |
          docker exec $(docker ps -qf "name=minio_storage") minio server --console-address ":9001" /data &

      - name: Check API health
        run: |
          STATUS=$(curl -o /dev/null -s -w "%{http_code}" http://localhost:8080/api/v1/ping)
          if [ "$STATUS" -ne 200 ]; then
            echo "Health check failed with status: $STATUS"
            exit 1
          fi

      - name: Stop and clean up
        if: always()
        run: docker-compose down